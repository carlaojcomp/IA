import pandas as pd
import numpy as np

def one_hot_encoder(arr):
    arr_int = arr.astype(int)
    # Aplica a codificação One Hot usando np.eye
    return np.eye(10)[arr_int]


def concatenar(a, b, c, d):
    n = len(a)
    if not (len(b) == len(c) == len(d) == n):
        raise ValueError("Todos os arrays devem ter o mesmo tamanho")

    matriz = np.column_stack((a, b, c, d))
    return matriz

def transpor(X):
    return X.transpose()
def pesos_iniciais(linhas, colunas):
    return np.random.rand(linhas, colunas)


def multiplicar(A, B):
    if A.shape[1] != B.shape[0]:
        raise ValueError("Número de colunas da matriz A deve ser igual ao número de linhas da matriz B.")
    return np.dot(A, B)

def inverter(X):
    det = np.linalg.det(X)
    if det == 0:
        raise ValueError("Matriz não é invertível (determinante zero).")
    return np.linalg.inv(X)

def pseudo_inversa(X, Y):
    m = len(X)
    # Adiciona Bias
    X_bias = np.c_[np.ones((m, 1)), X]
    M1 = inverter(multiplicar(transpor(X_bias), X_bias))
    return multiplicar(multiplicar(M1,transpor(X_bias)), Y)
def classificar_linear(X, W):
    m = len(X)
    X_bias = np.c_[np.ones((m, 1)), X]
    z = np.dot(X_bias, W)
    y_pred = np.argmax(z, axis=1)
    return y_pred
def converter_para_float(data):
    for coluna in data.columns:
        if data[coluna].dtype == 'object':
            data[coluna] = pd.to_numeric(data[coluna], errors='coerce')
    return data
def acuracia(y_true, y_pred):
    if len(y_true) != len(y_pred):
        raise ValueError("y_true e y_pred devem ter o mesmo tamanho")

    acertos = np.sum(y_true == y_pred)
    acuracia = acertos / len(y_true)
    return acuracia
def gradiente_descendente(X, Y, alfa, rep):
    m = len(X)
    # Adiciona Bias
    X_bias = np.c_[np.ones((m, 1)), X]
    m = len(X_bias)
    linhas_X, colunas_X = X_bias.shape
    linhas_Y, colunas_Y = Y.shape
    W = pesos_iniciais(colunas_X, colunas_Y)
    for i in range(rep):
        y_pred = multiplicar(X_bias, W)
        erro = y_pred - Y
        gradiente = (1/m) * multiplicar(transpor(X_bias), erro)
        W -= alfa * gradiente
    return W
def gradiente_descendente_estocastico(X, Y, alfa, rep):
    m = len(X)
    # Adiciona Bias ao modelo
    X_bias = np.c_[np.ones((m, 1)), X]
    m = len(X_bias)
    linhas_X, colunas_X = X_bias.shape
    linhas_Y, colunas_Y = Y.shape
    W = pesos_iniciais(colunas_X, colunas_Y)
    for i in range(rep):
        indices_embaralhados = np.random.permutation(m)
        X_embaralhado = X_bias[indices_embaralhados]
        Y_embaralhado = Y[indices_embaralhados]
        for j in range(m):
            y_pred = multiplicar(X_embaralhado, W)
            erro = y_pred - Y_embaralhado
            gradiente = (1 / m) * multiplicar(transpor(X_embaralhado), erro)
            W -= alfa * gradiente
    return W
numeros = pd.read_csv('numeros.txt')
numeros.rename(columns={}, inplace=True)
numeros.loc[numeros.size
numeros = numeros['A'].str.split(expand=True)
numeros = converter_para_float(numeros)
numeros = numeros.dropna()
classe = numeros[256].to_numpy()
numeros = numeros.drop(256, axis=1)
X = numeros.to_numpy()
Y = one_hot_encoder(classe)
pesos = gradiente_descendente(X,Y,0.01, 10000)
classificar = classificar_linear(X, pesos)
print(f"Acurácia do modelo da Descida do Gradiente: {acuracia(classe, classificar)}")


